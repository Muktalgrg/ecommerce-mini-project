{"ast":null,"code":"import _asyncToGenerator from \"/Users/batman/spring projects/ecommerce-project/frontend/angular-ecommerce/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@okta/okta-angular\";\nexport class AuthInterceptorService {\n  constructor(oktaAuth) {\n    this.oktaAuth = oktaAuth;\n  }\n\n  intercept(request, next) {\n    return from(this.handleAccess(request, next));\n  }\n\n  handleAccess(request, next) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const securedEndpoints = ['http://localhost:8080/api/orders'];\n\n      if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\n        const accessToken = yield _this.oktaAuth.getAccessToken(); // clone the request and add new header with access token\n\n        request = request.clone({\n          setHeaders: {\n            Authorization: 'Bearer' + accessToken\n          }\n        });\n      } // request is immutable so clone it.\n\n\n      return next.handle(request).toPromise();\n    })();\n  }\n\n}\n\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.OktaAuthService));\n};\n\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/batman/spring projects/ecommerce-project/frontend/angular-ecommerce/src/app/services/auth-interceptor.service.ts"],"names":["from","i0","i1","AuthInterceptorService","constructor","oktaAuth","intercept","request","next","handleAccess","securedEndpoints","some","url","urlWithParams","includes","accessToken","getAccessToken","clone","setHeaders","Authorization","handle","toPromise","ɵfac","AuthInterceptorService_Factory","t","ɵɵinject","OktaAuthService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,IAAT,QAAqB,MAArB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oBAApB;AACA,OAAO,MAAMC,sBAAN,CAA6B;AAChCC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACDC,EAAAA,SAAS,CAACC,OAAD,EAAUC,IAAV,EAAgB;AACrB,WAAOR,IAAI,CAAC,KAAKS,YAAL,CAAkBF,OAAlB,EAA2BC,IAA3B,CAAD,CAAX;AACH;;AACKC,EAAAA,YAAY,CAACF,OAAD,EAAUC,IAAV,EAAgB;AAAA;;AAAA;AAC9B,YAAME,gBAAgB,GAAG,CAAC,kCAAD,CAAzB;;AACA,UAAIA,gBAAgB,CAACC,IAAjB,CAAsBC,GAAG,IAAIL,OAAO,CAACM,aAAR,CAAsBC,QAAtB,CAA+BF,GAA/B,CAA7B,CAAJ,EAAuE;AACnE,cAAMG,WAAW,SAAS,KAAI,CAACV,QAAL,CAAcW,cAAd,EAA1B,CADmE,CAEnE;;AACAT,QAAAA,OAAO,GAAGA,OAAO,CAACU,KAAR,CAAc;AACpBC,UAAAA,UAAU,EAAE;AACRC,YAAAA,aAAa,EAAE,WAAWJ;AADlB;AADQ,SAAd,CAAV;AAKH,OAV6B,CAW9B;;;AACA,aAAOP,IAAI,CAACY,MAAL,CAAYb,OAAZ,EAAqBc,SAArB,EAAP;AAZ8B;AAajC;;AApB+B;;AAsBpClB,sBAAsB,CAACmB,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,SAAO,KAAKA,CAAC,IAAIrB,sBAAV,EAAkCF,EAAE,CAACwB,QAAH,CAAYvB,EAAE,CAACwB,eAAf,CAAlC,CAAP;AAA4E,CAAvJ;;AACAvB,sBAAsB,CAACwB,KAAvB,GAA+B,aAAc1B,EAAE,CAAC2B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE1B,sBAAT;AAAiC2B,EAAAA,OAAO,EAAE3B,sBAAsB,CAACmB,IAAjE;AAAuES,EAAAA,UAAU,EAAE;AAAnF,CAAtB,CAA7C","sourcesContent":["import { from } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@okta/okta-angular\";\nexport class AuthInterceptorService {\n    constructor(oktaAuth) {\n        this.oktaAuth = oktaAuth;\n    }\n    intercept(request, next) {\n        return from(this.handleAccess(request, next));\n    }\n    async handleAccess(request, next) {\n        const securedEndpoints = ['http://localhost:8080/api/orders'];\n        if (securedEndpoints.some(url => request.urlWithParams.includes(url))) {\n            const accessToken = await this.oktaAuth.getAccessToken();\n            // clone the request and add new header with access token\n            request = request.clone({\n                setHeaders: {\n                    Authorization: 'Bearer' + accessToken\n                }\n            });\n        }\n        // request is immutable so clone it.\n        return next.handle(request).toPromise();\n    }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) { return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.OktaAuthService)); };\nAuthInterceptorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthInterceptorService, factory: AuthInterceptorService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}